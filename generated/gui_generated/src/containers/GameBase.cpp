/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/containers/GameBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

GameBase::GameBase() :
    buttonCallback(this, &GameBase::buttonCallbackHandler)
{
    setWidth(507);
    setHeight(800);
    bg.setPosition(0, 0, 507, 800);
    bg.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));

    field1.setXY(6, 100);

    main_lb.setXY(155, 31);
    main_lb.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    main_lb.setLinespacing(0);
    main_lb.setTypedText(touchgfx::TypedText(T_SINGLEUSEID1));

    new_game_bt.setXY(337, 100);
    new_game_bt.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    new_game_bt.setLabelText(touchgfx::TypedText(T_SINGLEUSEID2));
    new_game_bt.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    new_game_bt.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    new_game_bt.setAction(buttonCallback);

    pause.setXY(337, 160);
    pause.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    pause.setLabelText(touchgfx::TypedText(T_SINGLEUSEID3));
    pause.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    pause.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    pause.setAction(buttonCallback);

    lines_lb.setPosition(337, 375, 166, 25);
    lines_lb.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    lines_lb.setLinespacing(0);
    Unicode::snprintf(lines_lbBuffer, LINES_LB_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID6).getText());
    lines_lb.setWildcard(lines_lbBuffer);
    lines_lb.setTypedText(touchgfx::TypedText(T_SINGLEUSEID4));

    pause_lb.setXY(100, 338);
    pause_lb.setVisible(false);
    pause_lb.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    pause_lb.setLinespacing(0);
    pause_lb.setTypedText(touchgfx::TypedText(T_SINGLEUSEID5));

    up_bt.setXY(392, 518);
    up_bt.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_UP_ARROW_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_UP_ARROW_32_ID));
    up_bt.setIconXY(15, 22);
    up_bt.setAction(buttonCallback);

    right_bt.setXY(432, 558);
    right_bt.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_NEXT_ARROW_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_NEXT_ARROW_32_ID));
    right_bt.setIconXY(22, 15);
    right_bt.setAction(buttonCallback);

    down_bt.setXY(392, 598);
    down_bt.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_DOWN_ARROW_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_DOWN_ARROW_32_ID));
    down_bt.setIconXY(15, 22);
    down_bt.setAction(buttonCallback);

    left_bt.setXY(352, 558);
    left_bt.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_BACK_ARROW_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_BACK_ARROW_32_ID));
    left_bt.setIconXY(22, 15);
    left_bt.setAction(buttonCallback);

    game_over.setXY(132, 319);
    game_over.setVisible(false);
    game_over.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    game_over.setLinespacing(0);
    game_over.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));

    add(bg);
    add(field1);
    add(main_lb);
    add(new_game_bt);
    add(pause);
    add(lines_lb);
    add(pause_lb);
    add(up_bt);
    add(right_bt);
    add(down_bt);
    add(left_bt);
    add(game_over);
}

void GameBase::initialize()
{
    field1.initialize();
}

void GameBase::new_game_act()
{
    //new_game_int
    //When new_game_act is called call virtual function
    //Call new_game
    new_game();
}

void GameBase::move_right_act()
{
    //mri
    //When move_right_act is called call virtual function
    //Call move_right
    move_right();
}

void GameBase::move_left_act()
{
    //mli
    //When move_left_act is called call virtual function
    //Call move_left
    move_left();
}

void GameBase::move_down_act()
{
    //mdi
    //When move_down_act is called call virtual function
    //Call move_down
    move_down();
}

void GameBase::rotate_act()
{
    //roti
    //When rotate_act is called call virtual function
    //Call rotate
    rotate();
}

void GameBase::toggle_pause_act()
{
    //toggle_pause_int
    //When toggle_pause_act is called call virtual function
    //Call toggle_pause
    toggle_pause();
}

void GameBase::tick_act()
{
    //tick_int
    //When tick_act is called call virtual function
    //Call tick
    tick();
}

void GameBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &new_game_bt)
    {
        //new_game_btn_int
        //When new_game_bt clicked call new_game_act on Game
        //Call new_game_act
        new_game_act();
    }
    else if (&src == &pause)
    {
        //toggle_pause_btn_int
        //When pause clicked call toggle_pause_act on Game
        //Call toggle_pause_act
        toggle_pause_act();
    }
    else if (&src == &up_bt)
    {
        //broti
        //When up_bt clicked call rotate_act on Game
        //Call rotate_act
        rotate_act();
    }
    else if (&src == &right_bt)
    {
        //bmri
        //When right_bt clicked call move_right_act on Game
        //Call move_right_act
        move_right_act();
    }
    else if (&src == &down_bt)
    {
        //bmdi
        //When down_bt clicked call move_down_act on Game
        //Call move_down_act
        move_down_act();
    }
    else if (&src == &left_bt)
    {
        //bmli
        //When left_bt clicked call move_left_act on Game
        //Call move_left_act
        move_left_act();
    }
}

